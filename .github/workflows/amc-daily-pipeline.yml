name: AMC Daily Showtime Pipeline

on:
  schedule:
    # Run every day at 7:00 PM Eastern Time
    # Using 12 AM UTC (midnight) which is 7 PM EST and 8 PM EDT
    # This ensures it runs at 7 PM EST in winter and 8 PM EDT in summer
    - cron: '0 0 * * *'
  workflow_dispatch: # Allow manual triggering

jobs:
  amc-pipeline:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        
    - name: Create output directories
      run: |
        mkdir -p output
        mkdir -p logs
        mkdir -p logs/raw_responses
        
    - name: Run AMC Scraper
      id: scraper
      run: |
        echo "üé¨ Starting AMC showtime scraping..."
        python -m amc_showtime_alert.amc_scraper
        
        # Find the latest generated JSON file
        LATEST_JSON=$(ls -t output/amc_showtimes_*.json | head -n1)
        echo "scraped_json=$LATEST_JSON" >> $GITHUB_OUTPUT
        echo "üìÅ Scraped data saved to: $LATEST_JSON"
        
        # Extract timestamp from filename for artifact naming
        TIMESTAMP=$(basename "$LATEST_JSON" | sed 's/amc_showtimes_\(.*\)\.json/\1/')
        echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
        
    - name: Run Special Events Parser
      id: parser
      run: |
        echo "üîç Parsing special events from scraped data..."
        SCRAPED_JSON="${{ steps.scraper.outputs.scraped_json }}"
        python -m amc_showtime_alert.special_events_parser "$SCRAPED_JSON"
        
        # Find the latest generated special events JSON file
        LATEST_SPECIAL_JSON=$(ls -t output/amc_showtimes_special_*.json | head -n1)
        echo "special_events_json=$LATEST_SPECIAL_JSON" >> $GITHUB_OUTPUT
        echo "üìÅ Special events data saved to: $LATEST_SPECIAL_JSON"
        
    - name: Send Telegram Notifications
      id: telegram
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_IDS: ${{ vars.TELEGRAM_CHAT_IDS }}
      run: |
        echo "üì± Sending Telegram notifications..."
        SPECIAL_JSON="${{ steps.parser.outputs.special_events_json }}"
        python -m amc_showtime_alert.telegram_notifier "$SPECIAL_JSON"
        echo "‚úÖ Telegram notifications sent"
        
    - name: Upload Scraped Data Artifact
      uses: actions/upload-artifact@v4
      with:
        name: amc-showtimes-${{ steps.scraper.outputs.timestamp }}
        path: ${{ steps.scraper.outputs.scraped_json }}
        retention-days: 30
        
    - name: Upload Special Events Artifact
      uses: actions/upload-artifact@v4
      with:
        name: amc-special-events-${{ steps.scraper.outputs.timestamp }}
        path: ${{ steps.parser.outputs.special_events_json }}
        retention-days: 30
        
    - name: Upload Logs Artifact
      uses: actions/upload-artifact@v4
      with:
        name: amc-logs-${{ steps.scraper.outputs.timestamp }}
        path: logs/
        retention-days: 7
        
    - name: Pipeline Summary
      run: |
        echo "üéâ AMC Daily Pipeline Completed Successfully!"
        echo "üìä Summary:"
        echo "  - Scraped data: ${{ steps.scraper.outputs.scraped_json }}"
        echo "  - Special events: ${{ steps.parser.outputs.special_events_json }}"
        echo "  - Notifications sent via Telegram"
        echo "  - Artifacts uploaded for download"
